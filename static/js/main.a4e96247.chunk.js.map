{"version":3,"sources":["icon.svg","arrow.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","list","dayName","weather","icon","max","min","Item","state","full","handleClick","setState","console","log","this","item","props","className","onClick","CSSTransition","in","appear","classNames","timeout","src","arrow","alt","require","unmountOnExit","React","Component","Card","App","itemFull","type","value","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4e96247.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.df82eb53.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.e27b183a.svg\";","import React from 'react';\nimport './app.scss';\nimport arrow from './arrow.svg';\nimport { CSSTransition } from 'react-transition-group';\n\nconst list = [\n  { dayName: 'Tuesday',   weather: 'Thunderstorm', icon: '10', max: '20', min: '8' },\n  { dayName: 'Wednesday', weather: 'Atmosphere', icon: '10', max: '20', min: '8' },\n  { dayName: 'Thursday',  weather: 'Rain', icon: '10', max: '20', min: '8' },\n  { dayName: 'Friday',    weather: 'Snow', icon: '10', max: '20', min: '8' },\n  { dayName: 'Saturday',  weather: 'Drizzle', icon: '10', max: '20', min: '8' },\n  { dayName: 'Sunday',    weather: 'Clear', icon: '10', max: '20', min: '8' },\n  { dayName: 'Monday',    weather: 'Clouds', icon: '10', max: '20', min: '8' },\n];\n\nclass Item extends React.Component {\n  state = {\n    full: false,\n  }\n\n  handleClick = () => {\n    this.setState({full: !this.state.full})\n    console.log('ok');\n  }\n\n  render() {\n    const { full } = this.state;\n    const { item } = this.props;\n    return (\n        <button\n          className = {`forecast-day ${item.weather}`}\n          onClick = { this.handleClick }\n        >\n          <div className=\"forecast-day__header\">\n            <div className=\"forecast-day__column\">\n              <div className=\"forecast-day__dayName\">{item.dayName}</div>\n              <CSSTransition \n                in = { full }\n                appear = { false }\n                classNames = \"arrow\"\n                timeout = { 300 }\n              >\n                <img className=\"forecast-day__arrow\" src={arrow} alt=\"arrow\"/>\n              </CSSTransition>\n            </div>\n            <div className=\"forecast-day__column\">\n              <div className=\"forecast-day__icon\">\n                <img src={require(\"./icon.svg\")} />\n              </div>\n              <div className=\"forecast-day__max term\">\n                <div className=\"term__value\">&nbsp;{item.max}&deg;</div>\n                <div className=\"term__label term__label-m\">max</div>\n              </div>\n              <div className=\"forecast-day__min term\">\n                <div className=\"term__value\">&nbsp;{item.min}&deg;</div>\n                <div className=\"term__label term__label-m\">min</div>\n              </div>\n            </div>\n          </div>\n\n          <CSSTransition\n            in = { full }\n            appear = { false }\n            timeout = { 300 }\n            unmountOnExit\n            classNames = \"row-full\"\n          >\n            <div\n              className = \"forecast__row-full\"\n              onClick = { this.handleClick }\n            >\n              <Card />\n            </div>\n          </CSSTransition>\n       </button>\n    )\n  }\n}\n\nclass Card extends React.Component {\n  render() {\n    return (\n      <div className=\"card\">\n        <div className=\"card__weather\">\n          <div className=\"card__temp\">13&deg;C</div>\n          <div className=\"card__condition\">scattered clouds</div>\n          <div className=\"card__wind term\">\n            <span className=\"term__label\">Wind: </span>\n            <span className=\"term__value\">6 m/s</span>\n          </div>\n          <div className=\"card__clouds term\">\n            <span className=\"term__label\">Clouds: </span>\n            <span className=\"term__value\">6%</span>\n          </div>\n          <div className=\"card__humidity term\">\n            <span className=\"term__label\">Humidity: </span>\n            <span className=\"term__value\">6%</span>\n          </div>\n        </div>\n        <div className=\"card__img\">\n          <img src={require(\"./icon.svg\")} />\n        </div>\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component{\n  state = {\n    itemFull: 'fact',\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"header\">\n          <div className=\"search\">\n            <input className=\"search__control\" type=\"text\" value=\"Saratov, Russia\" />\n            </div>\n          <Card />\n        </div>\n\n        <div className=\"forecast\">\n          {list.map((item) =>\n            <Item key={item.dayName} item={item}/>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}